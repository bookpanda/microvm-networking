// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/node.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeService_SendServerCommand_FullMethodName = "/proto.node.v1.NodeService/SendServerCommand"
	NodeService_SendClientCommand_FullMethodName = "/proto.node.v1.NodeService/SendClientCommand"
	NodeService_StopSyscalls_FullMethodName      = "/proto.node.v1.NodeService/StopSyscalls"
	NodeService_Cleanup_FullMethodName           = "/proto.node.v1.NodeService/Cleanup"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	SendServerCommand(ctx context.Context, in *SendServerCommandNodeRequest, opts ...grpc.CallOption) (*SendServerCommandNodeResponse, error)
	SendClientCommand(ctx context.Context, in *SendClientCommandNodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendClientCommandNodeResponse], error)
	StopSyscalls(ctx context.Context, in *StopSyscallsNodeRequest, opts ...grpc.CallOption) (*StopSyscallsNodeResponse, error)
	Cleanup(ctx context.Context, in *CleanupNodeRequest, opts ...grpc.CallOption) (*CleanupNodeResponse, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) SendServerCommand(ctx context.Context, in *SendServerCommandNodeRequest, opts ...grpc.CallOption) (*SendServerCommandNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendServerCommandNodeResponse)
	err := c.cc.Invoke(ctx, NodeService_SendServerCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SendClientCommand(ctx context.Context, in *SendClientCommandNodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendClientCommandNodeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], NodeService_SendClientCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendClientCommandNodeRequest, SendClientCommandNodeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeService_SendClientCommandClient = grpc.ServerStreamingClient[SendClientCommandNodeResponse]

func (c *nodeServiceClient) StopSyscalls(ctx context.Context, in *StopSyscallsNodeRequest, opts ...grpc.CallOption) (*StopSyscallsNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSyscallsNodeResponse)
	err := c.cc.Invoke(ctx, NodeService_StopSyscalls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Cleanup(ctx context.Context, in *CleanupNodeRequest, opts ...grpc.CallOption) (*CleanupNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupNodeResponse)
	err := c.cc.Invoke(ctx, NodeService_Cleanup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility.
type NodeServiceServer interface {
	SendServerCommand(context.Context, *SendServerCommandNodeRequest) (*SendServerCommandNodeResponse, error)
	SendClientCommand(*SendClientCommandNodeRequest, grpc.ServerStreamingServer[SendClientCommandNodeResponse]) error
	StopSyscalls(context.Context, *StopSyscallsNodeRequest) (*StopSyscallsNodeResponse, error)
	Cleanup(context.Context, *CleanupNodeRequest) (*CleanupNodeResponse, error)
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServiceServer struct{}

func (UnimplementedNodeServiceServer) SendServerCommand(context.Context, *SendServerCommandNodeRequest) (*SendServerCommandNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendServerCommand not implemented")
}
func (UnimplementedNodeServiceServer) SendClientCommand(*SendClientCommandNodeRequest, grpc.ServerStreamingServer[SendClientCommandNodeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendClientCommand not implemented")
}
func (UnimplementedNodeServiceServer) StopSyscalls(context.Context, *StopSyscallsNodeRequest) (*StopSyscallsNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSyscalls not implemented")
}
func (UnimplementedNodeServiceServer) Cleanup(context.Context, *CleanupNodeRequest) (*CleanupNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}
func (UnimplementedNodeServiceServer) testEmbeddedByValue()                     {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_SendServerCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendServerCommandNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SendServerCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_SendServerCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SendServerCommand(ctx, req.(*SendServerCommandNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SendClientCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendClientCommandNodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).SendClientCommand(m, &grpc.GenericServerStream[SendClientCommandNodeRequest, SendClientCommandNodeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeService_SendClientCommandServer = grpc.ServerStreamingServer[SendClientCommandNodeResponse]

func _NodeService_StopSyscalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSyscallsNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).StopSyscalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_StopSyscalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).StopSyscalls(ctx, req.(*StopSyscallsNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_Cleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Cleanup(ctx, req.(*CleanupNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.node.v1.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendServerCommand",
			Handler:    _NodeService_SendServerCommand_Handler,
		},
		{
			MethodName: "StopSyscalls",
			Handler:    _NodeService_StopSyscalls_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _NodeService_Cleanup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendClientCommand",
			Handler:       _NodeService_SendClientCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/node.proto",
}
