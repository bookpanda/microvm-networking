// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/vm.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VmService_Create_FullMethodName        = "/proto.vm.v1.VmService/Create"
	VmService_SendCommand_FullMethodName   = "/proto.vm.v1.VmService/SendCommand"
	VmService_TrackSyscalls_FullMethodName = "/proto.vm.v1.VmService/TrackSyscalls"
)

// VmServiceClient is the client API for VmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VmServiceClient interface {
	Create(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (*CreateVmResponse, error)
	SendCommand(ctx context.Context, in *SendCommandVmRequest, opts ...grpc.CallOption) (*SendCommandVmResponse, error)
	TrackSyscalls(ctx context.Context, in *TrackSyscallsVmRequest, opts ...grpc.CallOption) (*TrackSyscallsVmResponse, error)
}

type vmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVmServiceClient(cc grpc.ClientConnInterface) VmServiceClient {
	return &vmServiceClient{cc}
}

func (c *vmServiceClient) Create(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (*CreateVmResponse, error) {
	out := new(CreateVmResponse)
	err := c.cc.Invoke(ctx, VmService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmServiceClient) SendCommand(ctx context.Context, in *SendCommandVmRequest, opts ...grpc.CallOption) (*SendCommandVmResponse, error) {
	out := new(SendCommandVmResponse)
	err := c.cc.Invoke(ctx, VmService_SendCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmServiceClient) TrackSyscalls(ctx context.Context, in *TrackSyscallsVmRequest, opts ...grpc.CallOption) (*TrackSyscallsVmResponse, error) {
	out := new(TrackSyscallsVmResponse)
	err := c.cc.Invoke(ctx, VmService_TrackSyscalls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmServiceServer is the server API for VmService service.
// All implementations must embed UnimplementedVmServiceServer
// for forward compatibility
type VmServiceServer interface {
	Create(context.Context, *CreateVmRequest) (*CreateVmResponse, error)
	SendCommand(context.Context, *SendCommandVmRequest) (*SendCommandVmResponse, error)
	TrackSyscalls(context.Context, *TrackSyscallsVmRequest) (*TrackSyscallsVmResponse, error)
	mustEmbedUnimplementedVmServiceServer()
}

// UnimplementedVmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVmServiceServer struct {
}

func (UnimplementedVmServiceServer) Create(context.Context, *CreateVmRequest) (*CreateVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVmServiceServer) SendCommand(context.Context, *SendCommandVmRequest) (*SendCommandVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedVmServiceServer) TrackSyscalls(context.Context, *TrackSyscallsVmRequest) (*TrackSyscallsVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackSyscalls not implemented")
}
func (UnimplementedVmServiceServer) mustEmbedUnimplementedVmServiceServer() {}

// UnsafeVmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VmServiceServer will
// result in compilation errors.
type UnsafeVmServiceServer interface {
	mustEmbedUnimplementedVmServiceServer()
}

func RegisterVmServiceServer(s grpc.ServiceRegistrar, srv VmServiceServer) {
	s.RegisterService(&VmService_ServiceDesc, srv)
}

func _VmService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmServiceServer).Create(ctx, req.(*CreateVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommandVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmService_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmServiceServer).SendCommand(ctx, req.(*SendCommandVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmService_TrackSyscalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackSyscallsVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmServiceServer).TrackSyscalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmService_TrackSyscalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmServiceServer).TrackSyscalls(ctx, req.(*TrackSyscallsVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VmService_ServiceDesc is the grpc.ServiceDesc for VmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.vm.v1.VmService",
	HandlerType: (*VmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VmService_Create_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _VmService_SendCommand_Handler,
		},
		{
			MethodName: "TrackSyscalls",
			Handler:    _VmService_TrackSyscalls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vm.proto",
}
