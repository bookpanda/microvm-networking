// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/vm.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VmService_Create_FullMethodName            = "/proto.vm.v1.VmService/Create"
	VmService_SendServerCommand_FullMethodName = "/proto.vm.v1.VmService/SendServerCommand"
	VmService_SendClientCommand_FullMethodName = "/proto.vm.v1.VmService/SendClientCommand"
	VmService_TrackSyscalls_FullMethodName     = "/proto.vm.v1.VmService/TrackSyscalls"
	VmService_StopSyscalls_FullMethodName      = "/proto.vm.v1.VmService/StopSyscalls"
	VmService_Cleanup_FullMethodName           = "/proto.vm.v1.VmService/Cleanup"
)

// VmServiceClient is the client API for VmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VmServiceClient interface {
	Create(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (*CreateVmResponse, error)
	SendServerCommand(ctx context.Context, in *SendServerCommandVmRequest, opts ...grpc.CallOption) (*SendServerCommandVmResponse, error)
	SendClientCommand(ctx context.Context, in *SendClientCommandVmRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendClientCommandVmResponse], error)
	TrackSyscalls(ctx context.Context, in *TrackSyscallsVmRequest, opts ...grpc.CallOption) (*TrackSyscallsVmResponse, error)
	StopSyscalls(ctx context.Context, in *StopSyscallsVmRequest, opts ...grpc.CallOption) (*StopSyscallsVmResponse, error)
	Cleanup(ctx context.Context, in *CleanupVmRequest, opts ...grpc.CallOption) (*CleanupVmResponse, error)
}

type vmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVmServiceClient(cc grpc.ClientConnInterface) VmServiceClient {
	return &vmServiceClient{cc}
}

func (c *vmServiceClient) Create(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (*CreateVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVmResponse)
	err := c.cc.Invoke(ctx, VmService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmServiceClient) SendServerCommand(ctx context.Context, in *SendServerCommandVmRequest, opts ...grpc.CallOption) (*SendServerCommandVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendServerCommandVmResponse)
	err := c.cc.Invoke(ctx, VmService_SendServerCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmServiceClient) SendClientCommand(ctx context.Context, in *SendClientCommandVmRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendClientCommandVmResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VmService_ServiceDesc.Streams[0], VmService_SendClientCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendClientCommandVmRequest, SendClientCommandVmResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VmService_SendClientCommandClient = grpc.ServerStreamingClient[SendClientCommandVmResponse]

func (c *vmServiceClient) TrackSyscalls(ctx context.Context, in *TrackSyscallsVmRequest, opts ...grpc.CallOption) (*TrackSyscallsVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackSyscallsVmResponse)
	err := c.cc.Invoke(ctx, VmService_TrackSyscalls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmServiceClient) StopSyscalls(ctx context.Context, in *StopSyscallsVmRequest, opts ...grpc.CallOption) (*StopSyscallsVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSyscallsVmResponse)
	err := c.cc.Invoke(ctx, VmService_StopSyscalls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmServiceClient) Cleanup(ctx context.Context, in *CleanupVmRequest, opts ...grpc.CallOption) (*CleanupVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupVmResponse)
	err := c.cc.Invoke(ctx, VmService_Cleanup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmServiceServer is the server API for VmService service.
// All implementations must embed UnimplementedVmServiceServer
// for forward compatibility.
type VmServiceServer interface {
	Create(context.Context, *CreateVmRequest) (*CreateVmResponse, error)
	SendServerCommand(context.Context, *SendServerCommandVmRequest) (*SendServerCommandVmResponse, error)
	SendClientCommand(*SendClientCommandVmRequest, grpc.ServerStreamingServer[SendClientCommandVmResponse]) error
	TrackSyscalls(context.Context, *TrackSyscallsVmRequest) (*TrackSyscallsVmResponse, error)
	StopSyscalls(context.Context, *StopSyscallsVmRequest) (*StopSyscallsVmResponse, error)
	Cleanup(context.Context, *CleanupVmRequest) (*CleanupVmResponse, error)
	mustEmbedUnimplementedVmServiceServer()
}

// UnimplementedVmServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVmServiceServer struct{}

func (UnimplementedVmServiceServer) Create(context.Context, *CreateVmRequest) (*CreateVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVmServiceServer) SendServerCommand(context.Context, *SendServerCommandVmRequest) (*SendServerCommandVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendServerCommand not implemented")
}
func (UnimplementedVmServiceServer) SendClientCommand(*SendClientCommandVmRequest, grpc.ServerStreamingServer[SendClientCommandVmResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendClientCommand not implemented")
}
func (UnimplementedVmServiceServer) TrackSyscalls(context.Context, *TrackSyscallsVmRequest) (*TrackSyscallsVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackSyscalls not implemented")
}
func (UnimplementedVmServiceServer) StopSyscalls(context.Context, *StopSyscallsVmRequest) (*StopSyscallsVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSyscalls not implemented")
}
func (UnimplementedVmServiceServer) Cleanup(context.Context, *CleanupVmRequest) (*CleanupVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}
func (UnimplementedVmServiceServer) mustEmbedUnimplementedVmServiceServer() {}
func (UnimplementedVmServiceServer) testEmbeddedByValue()                   {}

// UnsafeVmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VmServiceServer will
// result in compilation errors.
type UnsafeVmServiceServer interface {
	mustEmbedUnimplementedVmServiceServer()
}

func RegisterVmServiceServer(s grpc.ServiceRegistrar, srv VmServiceServer) {
	// If the following call pancis, it indicates UnimplementedVmServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VmService_ServiceDesc, srv)
}

func _VmService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmServiceServer).Create(ctx, req.(*CreateVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmService_SendServerCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendServerCommandVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmServiceServer).SendServerCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmService_SendServerCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmServiceServer).SendServerCommand(ctx, req.(*SendServerCommandVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmService_SendClientCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendClientCommandVmRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VmServiceServer).SendClientCommand(m, &grpc.GenericServerStream[SendClientCommandVmRequest, SendClientCommandVmResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VmService_SendClientCommandServer = grpc.ServerStreamingServer[SendClientCommandVmResponse]

func _VmService_TrackSyscalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackSyscallsVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmServiceServer).TrackSyscalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmService_TrackSyscalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmServiceServer).TrackSyscalls(ctx, req.(*TrackSyscallsVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmService_StopSyscalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSyscallsVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmServiceServer).StopSyscalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmService_StopSyscalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmServiceServer).StopSyscalls(ctx, req.(*StopSyscallsVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmService_Cleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmServiceServer).Cleanup(ctx, req.(*CleanupVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VmService_ServiceDesc is the grpc.ServiceDesc for VmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.vm.v1.VmService",
	HandlerType: (*VmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VmService_Create_Handler,
		},
		{
			MethodName: "SendServerCommand",
			Handler:    _VmService_SendServerCommand_Handler,
		},
		{
			MethodName: "TrackSyscalls",
			Handler:    _VmService_TrackSyscalls_Handler,
		},
		{
			MethodName: "StopSyscalls",
			Handler:    _VmService_StopSyscalls_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _VmService_Cleanup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendClientCommand",
			Handler:       _VmService_SendClientCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/vm.proto",
}
