// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/filesystem.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileSystemService_Cleanup_FullMethodName = "/proto.filesystem.v1.FileSystemService/Cleanup"
	FileSystemService_GetLogs_FullMethodName = "/proto.filesystem.v1.FileSystemService/GetLogs"
)

// FileSystemServiceClient is the client API for FileSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSystemServiceClient interface {
	Cleanup(ctx context.Context, in *CleanupFileSystemRequest, opts ...grpc.CallOption) (*CleanupFileSystemResponse, error)
	GetLogs(ctx context.Context, in *GetLogsFileSystemRequest, opts ...grpc.CallOption) (*GetLogsFileSystemResponse, error)
}

type fileSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSystemServiceClient(cc grpc.ClientConnInterface) FileSystemServiceClient {
	return &fileSystemServiceClient{cc}
}

func (c *fileSystemServiceClient) Cleanup(ctx context.Context, in *CleanupFileSystemRequest, opts ...grpc.CallOption) (*CleanupFileSystemResponse, error) {
	out := new(CleanupFileSystemResponse)
	err := c.cc.Invoke(ctx, FileSystemService_Cleanup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) GetLogs(ctx context.Context, in *GetLogsFileSystemRequest, opts ...grpc.CallOption) (*GetLogsFileSystemResponse, error) {
	out := new(GetLogsFileSystemResponse)
	err := c.cc.Invoke(ctx, FileSystemService_GetLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemServiceServer is the server API for FileSystemService service.
// All implementations must embed UnimplementedFileSystemServiceServer
// for forward compatibility
type FileSystemServiceServer interface {
	Cleanup(context.Context, *CleanupFileSystemRequest) (*CleanupFileSystemResponse, error)
	GetLogs(context.Context, *GetLogsFileSystemRequest) (*GetLogsFileSystemResponse, error)
	mustEmbedUnimplementedFileSystemServiceServer()
}

// UnimplementedFileSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileSystemServiceServer struct {
}

func (UnimplementedFileSystemServiceServer) Cleanup(context.Context, *CleanupFileSystemRequest) (*CleanupFileSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}
func (UnimplementedFileSystemServiceServer) GetLogs(context.Context, *GetLogsFileSystemRequest) (*GetLogsFileSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedFileSystemServiceServer) mustEmbedUnimplementedFileSystemServiceServer() {}

// UnsafeFileSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemServiceServer will
// result in compilation errors.
type UnsafeFileSystemServiceServer interface {
	mustEmbedUnimplementedFileSystemServiceServer()
}

func RegisterFileSystemServiceServer(s grpc.ServiceRegistrar, srv FileSystemServiceServer) {
	s.RegisterService(&FileSystemService_ServiceDesc, srv)
}

func _FileSystemService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupFileSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_Cleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).Cleanup(ctx, req.(*CleanupFileSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsFileSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).GetLogs(ctx, req.(*GetLogsFileSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSystemService_ServiceDesc is the grpc.ServiceDesc for FileSystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.filesystem.v1.FileSystemService",
	HandlerType: (*FileSystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cleanup",
			Handler:    _FileSystemService_Cleanup_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _FileSystemService_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/filesystem.proto",
}
